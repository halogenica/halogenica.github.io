<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CUDA on Halogenica</title>
    <link>https://romero.dev/tags/cuda/</link>
    <description>Recent content in CUDA on Halogenica</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>mike@halogenica.net (Michael Romero)</managingEditor>
    <webMaster>mike@halogenica.net (Michael Romero)</webMaster>
    <lastBuildDate>Wed, 15 Dec 2010 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://romero.dev/tags/cuda/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CUDA Design Rule Checking</title>
      <link>https://romero.dev/tools/cuda-design-rule-checking/</link>
      <pubDate>Wed, 15 Dec 2010 00:00:00 +0000</pubDate>
      <author>mike@halogenica.net (Michael Romero)</author>
      <guid>https://romero.dev/tools/cuda-design-rule-checking/</guid>
      <description>&lt;p&gt;Design Rule Checking (DRC) of semiconductor layouts is a massively independently parallel problem, and well suited for CUDA. As part of an Independent Study, my friend Jeremy Espenshade and I implemented DRC algorithms using CUDA and achieved approximately 25-30x speedup of the checking algorithm on a Tesla card from 2009.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Volume Rendering using GPGPU</title>
      <link>https://romero.dev/graphics/volume-rendering-using-gpgpu/</link>
      <pubDate>Mon, 15 Jun 2009 00:00:00 +0000</pubDate>
      <author>mike@halogenica.net (Michael Romero)</author>
      <guid>https://romero.dev/graphics/volume-rendering-using-gpgpu/</guid>
      <description>&lt;p&gt;Traditional 3D computer graphics focus on rendering the exterior of objects. Volume rendering is a technique used to visualize information corresponding to the interior of an object, commonly used in medical imaging and other fields. Visualization of such data may be accomplished by ray casting; similar to ray tracing. Rendering each pixel can be done in parallel, so massively parallel architectures like GPGPU can dramatically speed up rendering.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>